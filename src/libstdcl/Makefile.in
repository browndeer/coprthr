#
# Makefile for libstdcl 
#

CFLAGS=@CFLAGS@

prefix=@prefix@
exec_prefix=@exec_prefix@

### this useless define is needed to silence useless autoconf warning
datarootdir=@datarootdir@

F90=@F90@

### select default OpenCL implementation if not already defined
#USE_OPENCL_INCLUDES ?= -I/usr/local/atistream/include
#USE_OPENCL_LIBS ?= -L/usr/local/atistream/lib/x86_64 -lOpenCL
USE_OPENCL_INCLUDES = -I@OPENCL_INCLUDE@
#USE_OPENCL_LIBS = -L@OPENCL_LIB@ -l@OPENCL_LIBNAME@

LIBELF_INC = @LIBELF_INC@
LIBELF_LIB = @LIBELF_LIB@

### enable build of debug version if not already defined
#ifeq (@ENABLE_DEBUG_LIBS@,1)
#ENABLE_DEBUG_LIBSTDCL=1
#else
#ENABLE_DEBUG_LIBSTDCL=0
#endif


DEFS += -DSTDCL_WARN 


ifneq (@DEFAULT_OPENCL_PLATFORM@,)
DEFS += -DDEFAULT_OPENCL_PLATFORM=\"@DEFAULT_OPENCL_PLATFORM@\"
endif

INSTALL_INCLUDE_DIR=@includedir@
INSTALL_BIN_DIR=@bindir@
INSTALL_LIB_DIR=@libdir@
INSTALL_MAN_DIR=@mandir@

ifneq ($(INSTALL_INCLUDE_DIR),)
DEFS += -DDEFAULT_STDCL_INCLUDE=\"$(INSTALL_INCLUDE_DIR)\"
endif

#DEFS += -DENABLE_CLEXPORT ### XXX experimental

ifneq (@ENABLE_CLGL@,1)
DEFS += -DDISABLE_CLGL 
endif

ifeq (@ENABLE_SILENT@,1)
DEFS += -DENABLE_SILENT
endif
ifneq (@MAX_CLMESG_LEVEL@,)
DEFS += -DMAX_CLMESG_LEVEL=@MAX_CLMESG_LEVEL@
endif
ifneq (@DEFAULT_CLMESG_LEVEL@,)
DEFS += -DDEFAULT_CLMESG_LEVEL=@DEFAULT_CLMESG_LEVEL@
endif

############################################################################
##### DO NOT MODIFY BELOW THIS LINE UNLESS YOU KNOW WHAT YOU ARE DOING #####
############################################################################

#VPATH = .:../libclelf:./man/man1:./man/man3

INCS += -I../../include $(USE_OPENCL_INCLUDES)
INCS += -I../libclelf

LIBS += $(USE_OPENCL_LIBS)

INCS += $(LIBELF_INC)
LIBS += $(LIBELF_LIB)

ifneq (@host_os@,linux-androideabi)
LIBS += -lpthread -lrt 
endif

ifeq (freebsd,$(patsubst freebsd%,freebsd,@build_os@))
LIBS += -lc 
else
LIBS += -ldl 
endif

### choosing to static link libclelf into libstdcl to simplify use -DAR
LIBCLELF = ../libclelf/libclelf.a
#LIBCLELF_D = ../libclelf/libclelf_d.a

#LIBS += -L../libclelf -lclelf

OBJS = clinit.o clcontext.o clfcn.o clmalloc.o clsched.o clarg.o clerror.o
#OBJS_D = $(subst .o,_d.o,$(OBJS)) 

MODS = stdcl.mod

F90_OBJS += $(subst .mod,_f90.o,$(MODS))
#F90_OBJS_D += $(subst .mod,_f90.o,$(MODS))

HDRS = stdcl.h clinit.h clfcn.h clcontext.h clsched.h clmalloc.h \
	clarg.h clforka.h clerror.h \
	clmalloc_allocator.h clvector.h clmulti_array.h \
	stdcl_host.h stdcl_kernel.h stdcl_kernel_openclcompat.h \
	clexec.h 

MAN3 = claddr.3 clmalloc.3 clndrange_set2d.3 clarg_set.3 clmattach.3 \
	clndrange_set3d.3 clarg_set_global.3 clmdetach.3 clndrange_set.3 \
	clarg_set_local.3 clmsync.3 clopen.3 clclose.3 clndrange_init1d.3 \
	clsizeofmem.3 clerror.3 clndrange_init2d.3 clsym.3 clfork.3 \
	clndrange_init3d.3 clwait.3 clfree.3 clndrange_init.3 stdcl.3 \
	clndrange_set1d.3 clflush.3

INSTALL_INCS = $(HDRS)
#INSTALL_LIBS = libstdcl.so libstdcl_d.so
INSTALL_LIBS = libstdcl.so libstdcl.a

CFLAGS += -g -O2 -fPIC
F90FLAGS = -fPIC

#ifeq (@ENABLE_MIC_CROSS_COMPILE@,1)
ifeq (@host@,k1om-unknown-linux-gnu)
CFLAGS += -mmic
endif

# note that fortran mods must preceed objects -DAR
ifneq ($(F90),)
TARGET = $(MODS)
LIB_OBJS = $(F90_OBJS)
#LIB_OBJS_D = $(F90_OBJS)
endif

TARGET += libstdcl.so libstdcl.a $(addsuffix .gz,$(MAN3))
LIB_OBJS += $(OBJS)
#LIB_OBJS_D += $(OBJS_D)

#ifeq ($(ENABLE_DEBUG_LIBSTDCL),1)
#TARGET += libstdcl_d.so 
#endif


all: $(TARGET)

.PHONY: install uninstall clean distclean check_root debug

libstdcl.so: $(OBJS) $(LIBCLELF)
	$(CC) $(CFLAGS) -shared -Wl,-soname=libstdcl.so \
		-o libstdcl.so $(LIB_OBJS) $(LIBCLELF) $(LIBS) 

libstdcl.a: $(OBJS) $(LIBCLELF)
	ar rcv libstdcl.a $(LIB_OBJS)

#libstdcl_d.so: $(OBJS_D) $(LIBCLELF_D)
#	$(CC) $(CFLAGS) -shared -Wl,-soname=libstdcl_d.so \
#		-o libstdcl_d.so $(LIB_OBJS_D) $(LIBCLELF_D) $(LIBS)

.SUFFIXES:
.SUFFIXES: .c .o .f90 .mod

#%.o:
#	$(CC) $(CFLAGS) $(DEFS) $(INCS) -c $*.c

.c.o:
	$(CC) $(CFLAGS) $(DEFS) $(INCS) -c $<

#%_d.o:
#	$(CC) $(CFLAGS) $(DEFS) -DSTDCL_DEBUG $(INCS) -c $*.c -o $*_d.o

%.3.gz:
	-gzip -f -c $*.3 > $*.3.gz

.f90.mod:
	$(F90) $(F90FLAGS) -c $< -o $*_f90.o


check_root: 
#ifneq ($(shell whoami),root)
#	$(error install must be done as root)
#endif


install: check_root $(INSTALL_INCS) $(INSTALL_LIBS) $(addsuffix .gz,$(MAN3))
	test -d $(DESTDIR)$(INSTALL_INCLUDE_DIR) || install -m 755 -d $(DESTDIR)$(INSTALL_INCLUDE_DIR)
	test -d $(DESTDIR)$(INSTALL_LIB_DIR) || install -m 755 -d $(DESTDIR)$(INSTALL_LIB_DIR)
	test -d $(DESTDIR)$(INSTALL_MAN_DIR)/man3 || install -m 755 -d $(DESTDIR)$(INSTALL_MAN_DIR)/man3
	install -m 644 $(INSTALL_INCS) $(DESTDIR)$(INSTALL_INCLUDE_DIR)
ifneq ($(F90),)
	install -m 644 $(MODS) $(DESTDIR)$(INSTALL_INCLUDE_DIR)
endif
	install -m 644 $(INSTALL_LIBS) $(DESTDIR)$(INSTALL_LIB_DIR)
	install -m 644 $(addsuffix .gz,$(MAN3)) $(DESTDIR)$(INSTALL_MAN_DIR)/man3

uninstall: check_root
	rm -f $(addprefix $(DESTDIR)$(INSTALL_INC_DIR)/,$(INSTALL_INCS))
ifneq ($(F90),)
	rm -f $(addprefix $(DESTDIR)$(INSTALL_INC_DIR)/,$(MODS))
endif
	rm -f $(addprefix $(DESTDIR)$(INSTALL_LIB_DIR)/,$(INSTALL_LIBS))
	rm -f $(addprefix $(DESTDIR)$(INSTALL_BIN_DIR)/,$(INSTALL_BINS))
	rm -f $(addprefix $(DESTDIR)$(INSTALL_MAN_DIR)/man3/,$(addsuffix .gz,$(MAN3)))


clean:
	rm -f *.o *.so *.a
	rm -f *.1.gz *.3.gz
	rm -f _interceptor.h 
	rm -f *.mod

distclean: clean

