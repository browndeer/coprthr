### 
### Makefile for libcoprthrcc
###

CFLAGS += @CFLAGS@

ifneq (@MAKE@,)
MAKE = @MAKE@
endif

prefix=@prefix@
exec_prefix=@exec_prefix@

### this useless define is needed to silence useless autoconf warning
datarootdir=@datarootdir@

LIBELF_INC=@LIBELF_INC@
LIBELF_LIB=@LIBELF_LIB@

### select default install paths 
INSTALL_BIN_DIR=@bindir@
INSTALL_LIB_DIR=@libdir@
INSTALL_INCLUDE_DIR=@includedir@
INSTALL_MAN_DIR=@mandir@

### set custom path for ICD files
#ifneq (@OPENCL_ICD_PATH@,)
#OPENCL_ICD_PATH=@OPENCL_ICD_PATH@
#else
#OPENCL_ICD_PATH=@sysconfdir@/OpenCL/vendors/
#endif

ifeq (@ENABLE_SILENT@,1)
DEFS += -DENABLE_SILENT
endif
ifneq (@MAX_CLMESG_LEVEL@,)
DEFS += -DMAX_CLMESG_LEVEL=@MAX_CLMESG_LEVEL@
endif
ifneq (@DEFAULT_CLMESG_LEVEL@,)
DEFS += -DDEFAULT_CLMESG_LEVEL=@DEFAULT_CLMESG_LEVEL@
endif

############################################################################
##### DO NOT MODIFY BELOW THIS LINE UNLESS YOU KNOW WHAT YOU ARE DOING #####
############################################################################

#XCL_OBJS = ocl_platform.o ocl_device.o ocl_context.o ocl_command_queue.o \
#	ocl_enqueue.o ocl_event.o ocl_program.o ocl_kernel.o ocl_memobj.o \
#	ocl_flush.o xcl_icd.o ocl_sampler.o ocl_profile.o ocl_clgl.o

#IMP_OBJS = elfcl_x86_64.o elfcl_386.o elfcl_arm32.o \
#	compiler_x86_64.o compiler_i386.o compiler_arm32.o 
OBJS = elfcl_x86_64.o elfcl_386.o elfcl_arm32.o elfcl_mic.o compiler_cc.o \
	compiler_x86_64.o compiler_i386.o compiler_arm32.o 

ifeq (@ENABLE_MIC_CROSS_COMPILE@,1)
DEFS += -DENABLE_MIC_CROSS_COMPILE
OBJS += compiler_mic.o
endif

OBJS_E = elfcl_x86_64.o elfcl_386.o elfcl_arm32.o \
	compiler_e32_emek.o \
	compiler_e32_needham.o 

#OBJS_CROSS = compiler_android_arm32.o

DEFS += -DINSTALL_LIB_DIR=\"$(INSTALL_LIB_DIR)\" 
DEFS += -DENABLE_NCPU

DEFS += -DLIBCOPRTHR_CC=\"@LIBCOPRTHR_CC@\"
DEFS += -DLIBCOPRTHR_CXX=\"@LIBCOPRTHR_CXX@\"

#ifneq (@ANDROID_NDK@,)
#DEFS += -DANDROID_NDK=\"@ANDROID_NDK@\"
#endif

ifeq (@ENABLE_ANDROID_CROSS_COMPILE@,1)
DEFS += -DENABLE_ANDROID_CROSS_COMPILE
OBJS += compiler_android_arm32.o
ifneq (@ANDROID_NDK@,)
DEFS += -DANDROID_NDK=\"@ANDROID_NDK@\"
endif
endif

######################################################################

TOPDIR ?= ../../

#SCRIPTS = ../scripts/
#OCLCALL_MASTER = ../libocl/oclcall.master

INCS += -I. -I$(TOPDIR)/include -I$(TOPDIR)/src/libcoprthr
INCS += -I$(TOPDIR)/src/libcoprthr_opencl

INCS += $(LIBELF_INC)

LIBS += $(LIBELF_LIB)

#LIBS += -lfl  -lpthread -lrt
LIBS += -lpthread -lrt
ifeq (freebsd,$(patsubst freebsd%,freebsd,@build_os@))
LIBS += -lc 
else
LIBS += -ldl 
endif

#OBJS = $(XCL_OBJS) $(IMP_OBJS)

DEFS += \
	-DINSTALL_BIN_DIR=\"$(INSTALL_BIN_DIR)\" \
	-DINSTALL_LIB_DIR=\"$(INSTALL_LIB_DIR)\" \
	-DINSTALL_INCLUDE_DIR=\"$(INSTALL_INCLUDE_DIR)\" 

#DISABLE_UBUNTU_FLAGS = -U_FORTIFY_SOURCE -fno-stack-protector \
#   -Wno-unused-result -Wno-format-security -Wno-format
DISABLE_UBUNTU_FLAGS = -U_FORTIFY_SOURCE -fno-stack-protector \
   -Wno-format-security -Wno-format

CFLAGS += -O2 -fPIC $(DISABLE_UBUNTU_FLAGS)
CFLAGS_VCORE += -O0 -fPIC 
CFLAGS_VCORE_RT = -O0 -fPIC -funroll-loops -fstrict-aliasing

ifeq (arm,$(patsubst arm%,arm,@build_cpu@))
CFLAGS += -marm
CFLAGS_VCORE += -marm
endif



#YACC = yacc
YACC = bison
YACCCFLAGS =  -y -v 

LEX = flex
LEXFLAGS = 

XCLNM_YYPREFIX = __xclnm_

TARGET = libcoprthrcc.so libcoprthrcc.a
#TARGET += icd.c
ifeq (@ENABLE_EPIPHANY@,1)
TARGET += libcoprthrcc-e.so libcoprthrcc-e.a
#INCS_E += -I$(TOPDIR)/src/libcoprthr-e
endif

INSTALL_HDRS = opencl_lift.h kcall.h opencl_lift_icc.h opencl_lift_icc_mic.h
INSTALL_COPRTHR_HDRS = coprthr_cc.h

INSTALL_LIBS = $(TARGET)

VPATH = ../coprthr-common/

all: $(TARGET) 

.PHONY: clean install uninstall

.SUFFIXES:
.SUFFIXES: .l .y .S .s .c .o


.c.o:
	$(CC) $(CFLAGS) $(DEFS) $(INCS) -c $<

.s.o:
	$(CC) $(CFLAGS) $(DEFS) $(INCS) -c $<

.S.o:
	$(CC) $(CFLAGS) $(DEFS) $(INCS) -c $<


#libcoprthrcc.so: $(OBJS) $(OBJS_CROSS)
#	$(CC) $(CFLAGS) $(INCS) \
#		-shared -Wl,-soname,libcoprthrcc.so -o libcoprthrcc.so  \
#		$(OBJS) $(OBJS_CROSS) $(LIBS)
libcoprthrcc.so: $(OBJS) 
	$(CC) $(CFLAGS) $(INCS) \
		-shared -Wl,-soname,libcoprthrcc.so -o libcoprthrcc.so $(OBJS) $(LIBS)

#libcoprthrcc.a: $(OBJS) $(OBJS_CROSS)
#	ar rcv libcoprthrcc.a $(OBJS) $(OBJS_CROSS)
libcoprthrcc.a: $(OBJS) 
	ar rcv libcoprthrcc.a $(OBJS) 

libcoprthrcc-e.so: $(OBJS_E) 
	$(CC) $(CFLAGS) $(INCS) \
		-shared -Wl,-soname,libcoprthrcc-e.so -o libcoprthrcc-e.so \
		$(OBJS_E) $(LIBS)

libcoprthrcc-e.a: $(OBJS_E)
	ar rcv libcoprthrcc-e.a $(OBJS_E)


compiler_x86_64.o: compiler_native.c
	$(CC) $(CFLAGS) $(DEFS) -D__COPRTHR_TARGET_HOST_x86_64__ $(INCS) \
		-c -o compiler_x86_64.o $<

compiler_i386.o: compiler_native.c
	$(CC) $(CFLAGS) $(DEFS) -D__COPRTHR_TARGET_HOST_i386__ $(INCS) \
		-c -o compiler_i386.o $<

compiler_arm32.o: compiler_native.c
	$(CC) $(CFLAGS) $(DEFS) -D__COPRTHR_TARGET_HOST_arm32__ $(INCS) \
		-c -o compiler_arm32.o $<

compiler_mic.o: compiler_native.c
	$(CC) $(CFLAGS) $(DEFS) -D__COPRTHR_TARGET_HOST_mic__ $(INCS) \
		-c -o compiler_mic.o $<


compiler_e32_emek.o: compiler_e32_emek.c
	$(CC) $(CFLAGS) $(DEFS) \
		$(INCS) $(INCS_E) -c compiler_e32_emek.c -o $*.o

compiler_e32_needham.o: compiler_e32.c
	$(CC) $(CFLAGS) $(DEFS) -D__COPRTHR_TARGET_E32_NEEDHAM__ \
		$(INCS) $(INCS_E) -c compiler_e32.c -o $*.o

compiler_e32_needhampro.o: compiler_e32.c
	$(CC) $(CFLAGS) $(DEFS) -D__COPRTHR_TARGET_E32_NEEDHAMPRO__ \
		$(INCS) $(INCS_E) -c compiler_e32.c -o $*.o

compiler_e32_blank.o: compiler_e32.c
	$(CC) $(CFLAGS) $(DEFS) -D__COPRTHR_TARGET_E32_BLANK__ \
		$(INCS) $(INCS_E) -c compiler_e32.c -o $*.o


compiler_android_arm32.o: compiler_cross.c
	$(CC) $(CFLAGS) $(DEFS) -D__COPRTHR_TARGET_HOST_arm32__ $(INCS) \
		-c -o compiler_android_arm32.o $<





install: 
	test -d $(DESTDIR)$(INSTALL_INCLUDE_DIR) || install -m 755 -d $(DESTDIR)$(INSTALL_INCLUDE_DIR)
	test -d $(DESTDIR)$(INSTALL_INCLUDE_DIR)/coprthr \
		 || install -m 755 -d $(DESTDIR)$(INSTALL_INCLUDE_DIR)/coprthr
	test -d $(DESTDIR)$(INSTALL_LIB_DIR) || install -m 755 -d $(DESTDIR)$(INSTALL_LIB_DIR)
	test -d $(DESTDIR)$(INSTALL_BIN_DIR) || install -m 755 -d $(DESTDIR)$(INSTALL_BIN_DIR)
	install -m 755 $(INSTALL_HDRS) $(DESTDIR)$(INSTALL_INCLUDE_DIR)
	install -m 755 $(INSTALL_COPRTHR_HDRS) $(DESTDIR)$(INSTALL_INCLUDE_DIR)/coprthr
	install -m 755 $(INSTALL_LIBS) $(DESTDIR)$(INSTALL_LIB_DIR)
	install -m 755 opencl_lift.h $(DESTDIR)$(INSTALL_INCLUDE_DIR)/opencl_lift.h

uninstall: 
#	rm -f $(DESTDIR)$(INSTALL_LIB_DIR)/libcoprthr.so
#	rm -f $(DESTDIR)$(INSTALL_LIB_DIR)/libcoprthrcc.so
	rm -f $(addprefix $(DESTDIR)$(INSTALL_LIB_DIR)/,$(INSTALL_LIBS))
#	rm -f $(addprefix $(DESTDIR)$(INSTALL_INCLUDE_DIR)/,sl_engine.h)
#	rm -f $(addprefix $(DESTDIR)$(INSTALL_INCLUDE_DIR)/,ser_engine.h)
#	rm -f $(addprefix $(DESTDIR)$(INSTALL_INCLUDE_DIR)/,workp.h)
#	rm -f $(addprefix $(DESTDIR)$(INSTALL_INCLUDE_DIR)/,opencl_lift.h)

clean:
	rm -f *.o *.so
	rm -f $(TARGET)

distclean: clean


