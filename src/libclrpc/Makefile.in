#
# Makefile for libclrpc
#

CFLAGS=@CFLAGS@

prefix=@prefix@
exec_prefix=@exec_prefix@

### this useless define is needed to silence useless autoconf warning
datarootdir=@datarootdir@

USE_OPENCL_INCLUDES = -I@OPENCL_INCLUDE@

ifeq (@host@,k1om-unknown-linux-gnu)
ifneq (@LIB_MIC_PATH@,)
LIB_MIC_PATH = @LIB_MIC_PATH@
else
LIB_MIC_PATH = /usr/cta/compiler/intel/13.1.0/composerxe/lib/mic
endif
LIB_MIC_LIBS = -L$(LIB_MIC_PATH) -limf -lsvml -lirng -lintlc
endif

### enable build of debug version if not already defined
#ifeq (@ENABLE_DEBUG_LIBS@,1)
#ENABLE_DEBUG_LIBCLRPC=1
#else
#ENABLE_DEBUG_LIBCLRPC=0
#endif


INSTALL_INCLUDE_DIR=@includedir@
INSTALL_BIN_DIR=@bindir@
INSTALL_LIB_DIR=@libdir@
INSTALL_MAN_DIR=@mandir@

ifeq (@ENABLE_SILENT@,1)
DEFS += -DENABLE_SILENT
endif
ifneq (@MAX_CLMESG_LEVEL@,)
DEFS += -DMAX_CLMESG_LEVEL=@MAX_CLMESG_LEVEL@
endif
ifneq (@DEFAULT_CLMESG_LEVEL@,)
DEFS += -DDEFAULT_CLMESG_LEVEL=@DEFAULT_CLMESG_LEVEL@
endif

############################################################################
##### DO NOT MODIFY BELOW THIS LINE UNLESS YOU KNOW WHAT YOU ARE DOING #####
############################################################################

SCRIPTS = ../scripts
OCLCALL_MASTER = ../libocl/oclcall.master

DEFS += -DHAVE_CONFIG_H

#DEFS += -DENABLE_PRINTCL

INCS += -I../../include $(USE_OPENCL_INCLUDES) -I../libocl

LIBS += $(USE_OPENCL_LIBS)

#INCS += $(LIBELF_INC)
#LIBS += $(LIBELF_LIB)

ifneq (@host_os@,linux-androideabi)
ifeq (freebsd,$(patsubst freebsd%,freebsd,@build_os@))
LIBS += -lpthread -lc -lrt 
else
LIBS += -lpthread -ldl -lrt 
endif
else
LIBS += -ldl
endif

INCS += -I@LIBEVENT_PATH@/include
LIBS += -L@LIBEVENT_PATH@/lib -levent -levent_pthreads -levent_pthreads

INCS += -I@LIBCONFIG_PATH@/include
LIBS += -L@LIBCONFIG_PATH@/lib -lconfig

ifeq (@host@,k1om-unknown-linux-gnu)
LIBS += $(LIB_MIC_LIBS)
endif

OBJS = clrpc.gen.o 
#OBJS_D = $(subst .o,_d.o,$(OBJS)) 

HDRS = clrpc.h  clrpc_common.h


INSTALL_INCS = $(HDRS)
INSTALL_LIBS = libclrpc.so libclrpc.a
INSTALL_BINS = clrpcd

CFLAGS += -g -O2 -fPIC

#ifeq (@ENABLE_MIC_CROSS_COMPILE@,1)
ifeq (@host@,k1om-unknown-linux-gnu)
CFLAGS += -mmic
LIBS += -L$(LIB_MIC_PATH) -limf -lsvml -lirng -lintlc -lconfig -lelf
endif

TARGET += libclrpc.so libclrpc.a
#LIB_OBJS += $(OBJS)
#LIB_OBJS_D += $(OBJS_D)

#ifeq ($(ENABLE_DEBUG_LIBSTDCL),1)
#TARGET += libclrpc_d.so 
#INSTALL_LIBS += libclrpc_d.so
#INSTALL_BINS += clrpcd_d
#endif

TARGET += clrpcd 

TARGET += clrpc.gen.c clrpc.gen.h libclrpc_call_vector.c

all: $(TARGET)

.PHONY: install uninstall clean distclean 

clrpc.gen.h clrpc.gen.c:
	event_rpcgen.py clrpc.rpc

libclrpc_call_vector.c:
	perl $(SCRIPTS)/gen_ocl_call_vector.pl __clrpc_call_vector clrpc_ \
		< $(OCLCALL_MASTER) > libclrpc_call_vector.c

libclrpc.so: clrpc.gen.h libclrpc.o libclrpc_call_vector.o $(OBJS)
	$(CC) $(CFLAGS) -shared -Wl,-soname=libclrpc.so \
		-o libclrpc.so libclrpc.o libclrpc_call_vector.o $(OBJS) $(LIBS) 

libclrpc.a: clrpc.gen.h libclrpc.o libclrpc_call_vector.o $(OBJS)
	ar rcv libclrpc.a libclrpc.o libclrpc_call_vector.o $(OBJS)

#libclrpc_d.so: libclrpc_d.o libclrpc_call_vector.o $(OBJS_D)
#	$(CC) $(CFLAGS) -shared -Wl,-soname=libclrpc_d.so \
#		-o libclrpc_d.so libclrpc_d.o libclrpc_call_vector.o $(OBJS_D) $(LIBS)

clrpcd: clrpcd.o $(OBJS)
	$(CC) $(CFLAGS) -o clrpcd clrpcd.o $(OBJS) \
		-L../libocl -locl -L. -lclrpc $(LIBS)

#clrpc_test_cli: clrpc_test_cli.o
#	$(CC) $(CFLAGS) -o clrpc_test_cli clrpc_test_cli.o -L. -lclrpc 
#
#clrpc_test_cli2: clrpc_test_cli2.o
#	$(CC) $(CFLAGS) -o clrpc_test_cli2 clrpc_test_cli2.o -L../libocl  -locl


.SUFFIXES:
.SUFFIXES: .c .o

.c.o: clrpc.gen.h 
	$(CC) $(CFLAGS) $(DEFS) $(INCS) -c $<

#%_d.o: clrpc.gen.h
#	$(CC) $(CFLAGS) $(DEFS) -DENABLE_PRINTCL $(INCS) -c $*.c -o $*_d.o

%.3.gz:
	-gzip -f -c $*.3 > $*.3.gz



install: $(INSTALL_INCS) $(INSTALL_LIBS) $(INSTALL_BINS)
	test -d $(DESTDIR)$(INSTALL_INCLUDE_DIR) || install -m 755 -d $(DESTDIR)$(INSTALL_INCLUDE_DIR)
	test -d $(DESTDIR)$(INSTALL_LIB_DIR) || install -m 755 -d $(DESTDIR)$(INSTALL_LIB_DIR)
	test -d $(DESTDIR)$(INSTALL_BIN_DIR) || install -m 755 -d $(DESTDIR)$(INSTALL_BIN_DIR)
	install -m 644 $(INSTALL_INCS) $(DESTDIR)$(INSTALL_INCLUDE_DIR)
	install -m 644 $(INSTALL_LIBS) $(DESTDIR)$(INSTALL_LIB_DIR)
	install -m 755 $(INSTALL_BINS) $(DESTDIR)$(INSTALL_BIN_DIR)

uninstall: 
	rm -f $(addprefix $(DESTDIR)$(INSTALL_INC_DIR)/,$(INSTALL_INCS))
	rm -f $(addprefix $(DESTDIR)$(INSTALL_LIB_DIR)/,$(INSTALL_LIBS))
	rm -f $(addprefix $(DESTDIR)$(INSTALL_BIN_DIR)/,$(INSTALL_BINS))


clean:
	rm -f *.o *.so *.x
	rm -f $(TARGET)

distclean: clean

