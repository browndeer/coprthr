# Process this file with autoconf to produce a configure script.

AC_PREREQ(2.59)
AC_INIT(coprthr, 1.1, support@browndeertechnology.com)
#AC_CONFIG_SRCDIR([clmalloc.h])
#AC_CONFIG_HEADER([config.h])

AC_PREFIX_DEFAULT(/usr/local/browndeer)

AC_DEFUN([SET_OPT],
		[if test x$1 != xno; then
			echo "enabled $3"
			$2=1
		else
			echo "disabled $3"
			$2=0
		fi;]
)

AC_CANONICAL_BUILD
AC_CANONICAL_HOST

# Checks for programs.
AC_PROG_CC
AC_PROG_INSTALL
#AC_PROG_LIBTOOL
AC_PATH_PROG([BASH],[bash],,[path=`$path`])
#AC_CHECK_PROG(F90,gfortran44,gfortran44)

# Checks for libraries.
# FIXME: Replace `main' with a function in `-lOpenCL':
AC_CHECK_LIB([OpenCL], [main])
# FIXME: Replace `main' with a function in `-ldl':
AC_CHECK_LIB([dl], [main])
# FIXME: Replace `main' with a function in `-lpthread':
AC_CHECK_LIB([pthread], [main])

AC_CHECK_LIB([elf],[elf64_getehdr])

PWD=`pwd`


### extract enable/disable options

AC_ARG_ENABLE(clgl,
  AC_HELP_STRING([--enable-clgl],[enable clgl support (default=yes)]),, enable_clgl=yes)

AC_ARG_ENABLE(clete,
  AC_HELP_STRING([--enable-clete],[enable clete expression template acceleration (default=yes)]),, enable_clete=yes)

AC_ARG_ENABLE(debug-libs,
  AC_HELP_STRING([--enable-debug-libs],[enable building debug versions of librarires (default=yes)]),, enable_debug_libs=yes)

#AC_ARG_ENABLE(cltrace,
#  AC_HELP_STRING([--enable-cltrace],[enable building cltrace tool (default=yes)]),, enable_cltrace=yes)

#AC_ARG_ENABLE(clld,
#  AC_HELP_STRING([--enable-clld],[enable building clld tool (default=yes)]),, enable_clld=yes)

AC_ARG_ENABLE(clcc,
  AC_HELP_STRING([--enable-clcc],[enable building clcc tools (default=yes)]),, enable_clcc=yes)

AC_ARG_ENABLE(libcoprthr,
  AC_HELP_STRING([--enable-libcoprthr],[enable libcoprthr (default=yes)]),, enable_libcoprthr=yes)

AC_ARG_ENABLE(libcoprthrcc,
  AC_HELP_STRING([--enable-libcoprthrcc],[enable libcoprthrcc (default=yes)]),, enable_libcoprthrcc=yes)

AC_ARG_ENABLE(libocl,
  AC_HELP_STRING([--enable-libocl],[enable libocl (default=yes)]),, enable_libocl=yes)

AC_ARG_ENABLE(libclrpc,
  AC_HELP_STRING([--enable-libclrpc],[enable libclrpc (default=yes)]),, enable_libclrpc=yes)

AC_ARG_ENABLE(libcoprthr-ncpu,
  AC_HELP_STRING([--enable-libcoprthr-ncpu],[enable libcoprthr ncpu (default=yes)]),, enable_libcoprthr_ncpu=yes)

AC_ARG_ENABLE(fortran,
  AC_HELP_STRING([--enable-fortran],[enable fortran bindings (default=no)]),, enable_fortran=no)

AC_ARG_ENABLE(silent,
  AC_HELP_STRING([--enable-silent],[enable silent build (default=no)]),, 
  enable_silent=no)

AC_ARG_ENABLE(debug,
  AC_HELP_STRING([--enable-debug],[enable debug messages (default=no)]),,
  enable_debug=no)

AC_ARG_ENABLE(epiphany,
	AC_HELP_STRING([--enable-epiphany],[enable epiphany support (default=no)]),,
	enable_epiphany=no)

AC_ARG_ENABLE(libocl-hook,
	AC_HELP_STRING([--enable-libocl-hook],[enable libocl hook support (default=no)]),,
	enable_libocl_hook=no)

AC_ARG_ENABLE(emek-build,
	AC_HELP_STRING([--enable-emek-build],[enable build for Epiphany EMEK (default=no)]),,
	enable_emek_build=no)

AC_ARG_ENABLE(old-esdk,
	AC_HELP_STRING([--enable-old-esdk],[enable old eSDK API for Epiphany (default=no)]),,
	enable_old_esdk=no)

AC_ARG_ENABLE(user-install,
	AC_HELP_STRING([--enable-user-install],[enable installation by user without roo permission (default=no)]),,
	enable_user_install=no)

AC_ARG_ENABLE(android-cross-compile,
	AC_HELP_STRING([--enable-android-cross-compile],[enable cross-compile for Android (default=no)]),,
	enable_android_cross_compile=no)

AC_ARG_ENABLE(mic-cross-compile,
	AC_HELP_STRING([--enable-mic-cross-compile],[enable cross-compile for MIC (default=no)]),,
	enable_mic_cross_compile=no)


enable_libcoprthr_ncpu=enable_libcoprthr;

echo enable_libcoprthr $enable_libcoprthr

### now process the selected options

SET_OPT($enable_clete, ENABLE_CLETE, "CLETE expression template acceleration")
#SET_OPT($enable_debug_libs, ENABLE_DEBUG_LIBS, "building debug versions of librarires - use \<libname\>_d.so")
SET_OPT($enable_cltrace, ENABLE_CLTRACE, "building cltrace tool")
SET_OPT($enable_clcc, ENABLE_CLCC, "building clcc tools")
SET_OPT($enable_libcoprthr, ENABLE_LIBCOPRTHR, "building libcoprthr")
SET_OPT($enable_libcoprthrcc, ENABLE_LIBCOPRTHRCC, "building libcoprthrcc")
SET_OPT($enable_libocl, ENABLE_LIBOCL, "building libocl")
#SET_OPT($enable_libcoprthr_ncpu, ENABLE_NCPU, "libcoprthr ncpu support")
SET_OPT($enable_fortran, ENABLE_FORTRAN, "fortran binding support")
#SET_OPT($enable_libcoprthr_atigpu, ENABLE_ATIGPU, "libcoprthr atigpu support")
#SET_OPT($enable_libcoprthr_bdt_builtins, ENABLE_BDT_BUILTINS, "libcoprthr use bdt builtins")
SET_OPT($enable_libclrpc, ENABLE_LIBCLRPC, "building libclrpc")
SET_OPT($enable_epiphany, ENABLE_EPIPHANY, "epiphany support")
SET_OPT($enable_libocl_hook, ENABLE_LIBOCL_HOOK, "libocl hook support")
SET_OPT($enable_emek_build, ENABLE_EMEK_BUILD, "Epiphany EMEK build")
SET_OPT($enable_old_esdk, ENABLE_OLD_ESDK, "Epiphany old eSDK API")
SET_OPT($enable_user_install, ENABLE_USER_INSTALL, "user install without root permission")
SET_OPT($enable_android_cross_compile, ENABLE_ANDROID_CROSS_COMPILE, "Android cross-compile")
SET_OPT($enable_mic_cross_compile, ENABLE_MIC_CROSS_COMPILE, "MIC cross-compile")


#OPENCL_INCLUDE=
#OPENCL_LIB=
#OPENCL_LIBNAME=
#DEFAULT_DEFAULT_OPENCL_PLATFORM=
#AMD_SDK=

###
### OpenCL platform selection is somewhat complicated.  Here are the rules:
### 
###    1) gather locations of vendor include and lib paths following best
###       known search path and save temporarily for use in the next steps
###    
###    2) test for --with-opencl-platform, set DEFAULT_OPENCL_PLATFORM.  
###       If it is not set, use /etc/OpenCL/vendors to build list 
###       in this order:
###       amdapp,nvidia,coprthr,intel
###   
###    3) if set scan DEFAULT_OPENCL_PLATFORM in order and set OPENCL_INCLUDE 
###       and OPENCL_LIB to be first platform for which we have good paths.
###       
###	 4) unless --disable-libocl is used, override step 3 with libocl
###
###    5) test for --with-opencl-include and --with-opencl-lib, and override
###       OPENCL_INCLUDE and OPENCL_LIB as necessary
###


### step 1)
### XXX add vendor checks to make sure there are no collisions -DAR

# find best known AMDAPP paths
if test -n "$(find /etc/OpenCL/vendors -maxdepth 1 -name 'ati*.icd' -print -quit)"; then
  tmp_amdapp_sdk=1;
elif test -n "$(find /etc/OpenCL/vendors -maxdepth 1 -name 'amd*.icd' -print -quit)"; then
  tmp_amdapp_sdk=1;
else 
  tmp_amdapp_sdk=0;
fi;
#if test $tmp_amdapp_sdk = 1; then
  for d in /opt/AMDAPP /usr/local/atistream
  do
    if test -e $d/include/CL/cl.h; then
      if test -e $d/lib/x86_64/libOpenCL.so; then
        tmp_amdapp_include=$d/include;
        tmp_amdapp_lib=$d/lib/x86_64;
        break;
      fi;
    fi;
  done;
#fi;

# find best known Nvidia paths
if test -n "$(find /etc/OpenCL/vendors -maxdepth 1 -name 'nvidia*.icd' -print -quit)"; then
  tmp_nvidia_sdk=1;
else
  tmp_nvidia_sdk=0;
fi;
  for d in /usr/local/cuda 
  do 
    if test -e $d/OpenCL/common/inc/CL/cl.h; then
      if test -e $d/OpenCL/common/lib/Linux64/libOpenCL.so; then
        tmp_nvidia_include=$d/OpenCL/common/inc;
        tmp_nvidia_lib=$d/OpenCL/common/lib/Linux64;
        break;
      elif test -e /usr/lib64/libOpenCL.so; then
        tmp_nvidia_include=$d/OpenCL/common/inc;
        tmp_nvidia_lib=/usr/lib64;
        break;
      fi;
    elif test -e $d/include/CL/cl.h; then
      if test -e $d/lib/libOpenCL.so; then
        tmp_nvidia_include=$d/include;
        tmp_nvidia_lib=$d/lib64;
        break;
      elif test -e /usr/lib64/libOpenCL.so; then
        tmp_nvidia_include=$d/include;
        tmp_nvidia_lib=/usr/lib64;
        break;
      fi;
    fi;
  done;
#else
#  tmp_nvidia_sdk=0;
#fi;

# set COPRTHR paths for bootstrap
if test x$enable_libocl = xyes; then
	tmp_coprthr_sdk=1
	tmp_coprthr_include=$PWD/include
	tmp_coprthr_lib=$PWD/src/libocl
else
	tmp_coprthr_sdk=0
	tmp_coprthr_include=
	tmp_coprthr_lib=
fi;

# find best known Intel paths
if test -n "$(find /etc/OpenCL/vendors -maxdepth 1 -name 'intel*.icd' -print -quit)"; then
  tmp_intel_sdk=1;
else
  tmp_intel_sdk=0;
fi;
  for d in /usr/local
  do 
    if test -e $d/include/CL/cl.h; then
      if test -e $d/lib64/libOpenCL.so; then
        tmp_intel_include=$d/include;
        tmp_intel_lib=$d/lib64;
        break;
      elif test -e /usr/lib/libOpenCL.so; then
        tmp_intel_include=$d/include;
        tmp_intel_lib=/usr/lib;
        break;
      fi;
    fi;
  done;
#else
#  tmp_intel_sdk=0;
#fi;


### step 2)

# test for --with-opencl-platform specification
AC_ARG_WITH(opencl-platform,
  AC_HELP_STRING([--with-opencl-platform=NAMELIST], 
  [specify default platform selection as a comma seperated list]),
  [
    if test x$withval = xyes; then
      AC_MSG_ERROR([usage: --with-opencl-platform=NAMELIST])
    else
		DEFAULT_OPENCL_PLATFORM=$withval;
    fi;
  ],
  [
    if test $tmp_amdapp_sdk -eq 1; then
      DEFAULT_OPENCL_PLATFORM=amdapp;
    fi;

    if test $tmp_nvidia_sdk -eq 1; then
      if ! test -z $DEFAULT_OPENCL_PLATFORM; then
        DEFAULT_OPENCL_PLATFORM=$DEFAULT_OPENCL_PLATFORM,nvidia;
      else
        DEFAULT_OPENCL_PLATFORM=nvidia;
      fi;
    fi;

    if test $tmp_coprthr_sdk -eq 1; then
      if ! test -z $DEFAULT_OPENCL_PLATFORM; then
        DEFAULT_OPENCL_PLATFORM=$DEFAULT_OPENCL_PLATFORM,coprthr;
      else
        DEFAULT_OPENCL_PLATFORM=coprthr;
      fi;
    fi;

    if test $tmp_intel_sdk -eq 1; then
      if ! test -z $DEFAULT_OPENCL_PLATFORM; then
        DEFAULT_OPENCL_PLATFORM=$DEFAULT_OPENCL_PLATFORM,intel;
      else
        DEFAULT_OPENCL_PLATFORM=intel;
      fi;
    fi;
  ])


### step 3)

list2=`echo $DEFAULT_OPENCL_PLATFORM | awk '{sub(/,/," ");print}'`
for p in $list2
do
  echo $p

  case $p in

    amd*) 
      OPENCL_INCLUDE=$tmp_amdapp_include;
      OPENCL_LIB=$tmp_amdapp_lib;
      OPENCL_LIBNAME=OpenCL;
      break      
		;;

    nvidia*) 
      OPENCL_INCLUDE=$tmp_nvidia_include;
      OPENCL_LIB=$tmp_nvidia_lib;
      OPENCL_LIBNAME=OpenCL;
      break      
		;;

    coprthr*) 
      OPENCL_INCLUDE=$tmp_coprthr_include;
      OPENCL_LIB=$tmp_coprthr_lib;
      OPENCL_LIBNAME=ocl;
      break      
		;;

    intel*) 
      OPENCL_INCLUDE=$tmp_intel_include;
      OPENCL_LIB=$tmp_intel_lib;
      OPENCL_LIBNAME=OpenCL;
      break      
		;;

    *)
      echo "unknown OpenCL platform '" $p "'";
      ;;
esac
done


### step 4)

if test x$enable_libocl = xyes; then
	OPENCL_INCLUDE=$tmp_coprthr_include;
	OPENCL_LIB=$tmp_coprthr_lib;
	OPENCL_LIBNAME=ocl;
fi;


### step 5)

# test for --with-opencl-include specification
AC_ARG_WITH(opencl-include,
  AC_HELP_STRING([--with-opencl-include=DIR], 
  [specify OpenCL include path]),
  [
    if test x$withval = xyes; then
      AC_MSG_ERROR([usage: --with-opencl-include=DIR])
    elif ! test -e $withval/CL/cl.h; then
      AC_MSG_ERROR([bad include path, could not find CL/cl.h])
    else
		OPENCL_INCLUDE=$withval;
    fi;
  ],
  [])

# test for --with-opencl-lib specification
AC_ARG_WITH(opencl-lib,
  AC_HELP_STRING([--with-opencl-lib=DIR], 
  [specify OpenCL lib path]),
  [
    if test x$withval = xyes; then
      AC_MSG_ERROR([usage: --with-opencl-lib=DIR])
    elif ! test -e $withval/lib$OPENCL_LIBNAME.so; then
      AC_MSG_ERROR([bad lib path, could not find $OPENCL_LIB])
    else
		OPENCL_LIB=$withval;
    fi;
  ],
  [])

echo "tmp_amdapp_sdk = " $tmp_amdapp_sdk
echo "tmp_amdapp_include = " $tmp_amdapp_include
echo "tmp_amdapp_lib = " $tmp_amdapp_lib

echo "tmp_nvidia_sdk = " $tmp_nvidia_sdk
echo "tmp_nvidia_include = " $tmp_nvidia_include
echo "tmp_nvidia_lib = " $tmp_nvidia_lib

echo "tmp_coprthr_sdk = " $tmp_coprthr_sdk
echo "tmp_coprthr_include = " $tmp_coprthr_include
echo "tmp_coprthr_lib = " $tmp_coprthr_lib

echo "tmp_intel_sdk = " $tmp_intel_sdk
echo "tmp_intel_include = " $tmp_intel_include
echo "tmp_intel_lib = " $tmp_intel_lib


### XXX consider making bootstrap mode a single test -DAR
if test -z $DEFAULT_OPENCL_PLATFORM; then
	if test x$enable_libcoprthr = xyes; then
		DEFAULT_OPENCL_PLATFORM=coprthr;
		echo no default OpenCL platform, libcoprthr enabled, using bootstrap;
	else
		AC_MSG_ERROR([no default OpenCL platform, try --enable-libcoprthr])
	fi
fi

if test -z $OPENCL_INCLUDE; then
	if test x$enable_libcoprthr = xyes; then
		OPENCL_INCLUDE=$PWD/include;
		echo no OpenCL include path, libcoprthr enabled, using bootstrap;
	else
		AC_MSG_ERROR([no OpenCL include path, try --with-opencl-include=DIR])
	fi
fi

if test -z $OPENCL_LIB; then
	if test x$enable_libcoprthr = xyes; then
		OPENCL_LIB=$PWD/src/libcoprthr;
		echo no OpenCL lib path, libcoprthr enabled, using bootstrap;
	else
		AC_MSG_ERROR([no OpenCL lib path, try --with-opencl-lib=DIR])
	fi
fi

if test -z $OPENCL_LIBNAME; then
	if test x$enable_libcoprthr = xyes; then
		OPENCL_LIBNAME=coprthr;
		echo no OpenCL lib name, libcoprthr enabled, using bootstrap;
	else
		AC_MSG_ERROR([no OpenCL lib name])
	fi
fi


echo "DEFAULT_OPENCL_PLATFORM = " $DEFAULT_OPENCL_PLATFORM
echo "OPENCL_INCLUDE = " $OPENCL_INCLUDE
echo "OPENCL_LIB = " $OPENCL_LIB
echo "OPENCL_LIBNAME = " $OPENCL_LIBNAME

if test x$OPENCL_LIBNAME = xcoprthr; then
	enable_clgl=no;
fi
SET_OPT($enable_clgl, ENABLE_CLGL, "CLGL support")


AC_ARG_WITH(fortran,
  AC_HELP_STRING([--with-fortran=PROG], [Use fortran compiler PROG]),
  [
    if test x$withval = xno; then
         AC_MSG_ERROR([no fortran compiler specified])
    else
    	F90=$withval
    fi;
  ],
  []) 

if test x$enable_fortran = xyes; then
	if ! test -d F90; then
		AC_CHECK_PROG(F90,gfortran44,gfortran44)
	fi;
fi;

echo $F90


### allow a default --with-lib to be provided when prerequisite libraries
### are all installed in same place.

AC_ARG_WITH(lib,
  AC_HELP_STRING([--with-lib=DIR],
  [set path for prerequisite libs]),
  [
    if test x$withval = xno; then
		AC_MSG_ERROR([usage: --with-lib=DIR])
    else
      LIB_PATH=$withval
    fi;
  ],
  [ LIB_PATH=/usr/local ])




### now address a constant annoyance.  
### we will require a path for libelf and most importantly we will 
### reject attempts to use libelf.so.1 because its useless -DAR

AC_ARG_WITH(libelf,
  AC_HELP_STRING([--with-libelf=DIR], [specify path to libelf]),
  [
    if test x$withval = xno; then
         AC_MSG_ERROR([usage: --with-libelf=DIR])
    else
      LIBELF_PATH=$withval
    fi;
    echo $LIBELF_PATH
  ],
  [
    LIBELF_PATH=$LIB_PATH;
  ])

echo $LIBELF_PATH

# XXX this seems like a sledge hammer, but its all i could come up with -DAR
tmp_test_libelf=`readelf -d $LIBELF_PATH/lib/libelf.so | grep 'Library soname' | awk '{print $5}'`

if test -e $LIBELF_PATH/lib/libelf.a; then
	echo "using static libelf"
elif ! test -e $LIBELF_PATH/lib/libelf.so; then
   AC_MSG_ERROR([cannot find libelf, try --with-libelf=DIR])
elif ! test x$tmp_test_libelf = x@<:@libelf.so.0@:>@; then
	echo $tmp_test_libelf
	AC_MSG_ERROR([incorrect version of libelf specified])
fi;

#libelf_inc="-I$LIBELF_PATH/include"
#libelf_lib="-L$LIBELF_PATH/lib -lelf"
LIBELF_INC="-I$LIBELF_PATH/include"
LIBELF_LIB="-Wl,-rpath,$LIBELF_PATH/lib -L$LIBELF_PATH/lib -lelf"

### XXX clean up this syntax - above - for setting paths and such -DAR


### select C/C++ compilers for libcoprthr

AC_ARG_WITH(libcoprthr-cc,
  AC_HELP_STRING([--with-libcoprthr-cc=PROG], 
  [use PROG for libcoprthr C compiler]),
  [
    if test x$withval = xno; then
         AC_MSG_ERROR([no C compiler specified])
    else
    	LIBCOPRTHR_CC=$withval
    fi;
  ],
  [ LIBCOPRTHR_CC=gcc ]) 

AC_ARG_WITH(libcoprthr-cxx,
  AC_HELP_STRING([--with-libcoprthr-cxx=PROG], 
  [use PROG for libcoprthr C++ compiler]),
  [
    if test x$withval = xno; then
         AC_MSG_ERROR([no C++ compiler specified])
    else
    	LIBCOPRTHR_CXX=$withval
    fi;
  ],
  [ LIBCOPRTHR_CXX=g++ ]) 

AC_ARG_WITH(libcoprthr-model,
  AC_HELP_STRING([--with-libcoprthr-model=default|template|no-template], 
  [select model for libcoprthr OCL compilation]),
  [
    if test x$withval = xtemplate; then
    	LIBCOPRTHR_MODEL=$withval
    elif test x$withval = xno-template; then
    	LIBCOPRTHR_MODEL=$withval
    elif test x$withval = xdefault; then
    	LIBCOPRTHR_MODEL=$withval
    else
      AC_MSG_ERROR([invalid libcoprthr model selected])
    fi;
  ],
  [ LIBCOPRTHR_MODEL=default ]) 

if test x$enable_libcoprthr = xyes; then
  echo LIBCOPRTHR_CC = $LIBCOPRTHR_CC
  echo LIBCOPRTHR_CXX = $LIBCOPRTHR_CXX
  echo LIBCOPRTHR_MODEL = $LIBCOPRTHR_MODEL
fi;



### allow custom path for ICD files
AC_ARG_WITH(opencl-icd-path,
  AC_HELP_STRING([--with-opencl-icd-path=DIR],
  [set custom path for ICD files]),
  [
    if test x$withval = xno; then
		AC_MSG_ERROR([no ICD path specified])
    else
      OPENCL_ICD_PATH=$withval
    fi;
  ],
  [])


### set path for libevent
AC_ARG_WITH(libevent,
  AC_HELP_STRING([--with-libevent=DIR],
  [set path for libevent]),
  [
    if test x$withval = xno; then
		AC_MSG_ERROR([usage: --with-libevent=DIR])
    else
      LIBEVENT_PATH=$withval
    fi;
  ],
  [ 
    LIBEVENT_PATH=$LIB_PATH
  ])

echo "XXX " $LIB_PATH
echo "XXX " $LIBEVENT_PATH

if ! test -e $LIBEVENT_PATH/include/event2; then
   AC_MSG_ERROR([cannot find libevent headers])
fi;
	
if test -e $LIBEVENT_PATH/lib/libevent.so; then
	echo "found " $LIBEVENT_PATH/lib/libevent.so
elif test -e $LIBEVENT_PATH/lib/libevent.a; then
	echo "using static libevent"
else
   AC_MSG_ERROR([cannot find libevent.so ])
fi;


### set path for libconfig
AC_ARG_WITH(libconfig,
  AC_HELP_STRING([--with-libconfig=DIR],
  [set path for libconfig]),
  [
    if test x$withval = xno; then
		AC_MSG_ERROR([usage: --with-libconfig=DIR])
    else
      LIBCONFIG_PATH=$withval
    fi;
  ],
  [ 
    LIBCONFIG_PATH=$LIB_PATH
  ])

if ! test -e $LIBCONFIG_PATH/include/libconfig.h; then
   AC_MSG_ERROR([cannot find libconfig header])
fi;
if test -e $LIBCONFIG_PATH/lib/libconfig.so; then
	echo "found" $LIBCONFIG_PATH/lib/libconfig.so
elif test -e $LIBCONFIG_PATH/lib/libconfig.a; then
	echo "using static libconfig"
else
   AC_MSG_ERROR([cannot find libconfig.so ])
fi;



### set max clmesg level
AC_ARG_WITH(max-clmesg-level,
  AC_HELP_STRING([--with-max-clmesg-level=LEVEL],
  [set max clmesg level]),
  [
    if test x$withval = xno; then
		AC_MSG_ERROR([usage: --with-max-clmesg-level=LEVEL])
    else
      MAX_CLMESG_LEVEL=$withval
    fi;
  ],
  [ MAX_CLMESG_LEVEL=7 ])

### set default clmesg level
AC_ARG_WITH(default-clmesg-level,
  AC_HELP_STRING([--with-default-clmesg-level=LEVEL],
  [set default clmesg level]),
  [
    if test x$withval = xno; then
		AC_MSG_ERROR([usage: --with-default-clmesg-level=LEVEL])
    else
      DEFAULT_CLMESG_LEVEL=$withval
    fi;
  ],
  [ DEFAULT_CLMESG_LEVEL=6 ])

if test x$enable_debug = xyes; then
	if test x$enable_silent = xyes; then
		AC_MSG_WARN([--enable-silent overrides --enable-debug]);
		enable_debug=no;
	else
		MAX_CLMESG_LEVEL=7;
		DEFAULT_CLMESG_LEVEL=7;
	fi;
fi;

SET_OPT($enable_silent, ENABLE_SILENT, "silent build")
SET_OPT($enable_debug, ENABLE_DEBUG, "debug build")



###
### Determine Epiphany SDK paths
###

if test x$enable_epiphany = xyes; then

AC_ARG_WITH(esdk,
  AC_HELP_STRING([--with-esdk=DIR],
  [set path for esdk]),
  [
    if test x$withval = xno; then
		AC_MSG_ERROR([usage: --with-esdk=DIR])
    else
      ESDK_PATH=$withval
    fi;
  ],
  [ 
    if test -e /opt/adapteva/esdk; then
      ESDK_PATH=/opt/adapteva/esdk/;
    elif test -e /usr/local/adapteva; then
      ESDK_PATH=/usr/local/adapteva;
    else
      AC_MSG_ERROR([cannot find esdk, try --with-esdk=DIR])
    fi;
  ])
fi;


###
### Optional set path for ANDROID_NDK
###

AC_ARG_WITH(android-ndk,
  AC_HELP_STRING([--with-android-ndk=DIR],
  [set path for android NDK]),
  [
    if test x$withval = xno; then
		AC_MSG_ERROR([usage: --with-android-ndk=DIR])
    else
      ANDROID_NDK=$withval
    fi;
  ],
  [ 
#    if test -e /opt/adapteva/esdk; then
#      ESDK_PATH=/opt/adapteva/esdk/;
#    elif test -e /usr/local/adapteva; then
#      ESDK_PATH=/usr/local/adapteva;
#    else
#      AC_MSG_ERROR([cannot find esdk, try --with-esdk=DIR])
#    fi;
    ANDROID_NDK=
  ])

AC_ARG_WITH(android-platform,
  AC_HELP_STRING([--with-android-platform=DIR],
  [set path for android platform]),
  [
    if test x$withval = xno; then
		AC_MSG_ERROR([usage: --with-android-platform=DIR])
    else
      ANDROID_PLATFORM=$withval
    fi;
  ],
  [ 
#    if test -e /opt/adapteva/esdk; then
#      ESDK_PATH=/opt/adapteva/esdk/;
#    elif test -e /usr/local/adapteva; then
#      ESDK_PATH=/usr/local/adapteva;
#    else
#      AC_MSG_ERROR([cannot find esdk, try --with-esdk=DIR])
#    fi;
    ANDROID_PLATFORM=
  ])

AC_ARG_WITH(android-arch,
  AC_HELP_STRING([--with-android-arch=DIR],
  [set path for android arch]),
  [
    if test x$withval = xno; then
		AC_MSG_ERROR([usage: --with-android-arch=DIR])
    else
      ANDROID_ARCH=$withval
    fi;
  ],
  [ 
#    if test -e /opt/adapteva/esdk; then
#      ESDK_PATH=/opt/adapteva/esdk/;
#    elif test -e /usr/local/adapteva; then
#      ESDK_PATH=/usr/local/adapteva;
#    else
#      AC_MSG_ERROR([cannot find esdk, try --with-esdk=DIR])
#    fi;
    ANDROID_ARCH=
  ])


###
### Optional set path for MIC libraries
###

AC_ARG_WITH(lib-mic,
  AC_HELP_STRING([--with-lib-mic=DIR],
  [set path for MIC libraries]),
  [
    if test x$withval = xno; then
		AC_MSG_ERROR([usage: --with-lib-mic=DIR])
    else
      LIB_MIC_PATH=$withval
    fi;
  ],
  [ 
#    if test -e /opt/adapteva/esdk; then
#      ESDK_PATH=/opt/adapteva/esdk/;
#    elif test -e /usr/local/adapteva; then
#      ESDK_PATH=/usr/local/adapteva;
#    else
#      AC_MSG_ERROR([cannot find esdk, try --with-esdk=DIR])
#    fi;
    LIB_MIC_PATH=
  ])


BASH=`which bash`

#MAKE=make
case $build_os in

	freebsd*)
		MAKE=gmake
		;;

	*)
		MAKE=make
		;;

esac;


AC_SUBST(BASH)
AC_SUBST(MAKE)
AC_SUBST(F90)

AC_SUBST(ENABLE_CLGL)
AC_SUBST(ENABLE_CLETE)
AC_SUBST(ENABLE_DEBUG_LIBS)
AC_SUBST(ENABLE_CLTRACE)
AC_SUBST(ENABLE_CLCC)
AC_SUBST(ENABLE_LIBCOPRTHR)
AC_SUBST(ENABLE_LIBCOPRTHRCC)
AC_SUBST(ENABLE_LIBOCL)
AC_SUBST(ENABLE_LIBCLRPC)
AC_SUBST(ENABLE_NCPU)
#AC_SUBST(ENABLE_ATIGPU)
#AC_SUBST(ENABLE_BDT_BUILTINS)
AC_SUBST(ENABLE_SILENT)
AC_SUBST(ENABLE_DEBUG)
AC_SUBST(ENABLE_EPIPHANY)
AC_SUBST(ENABLE_LIBOCL_HOOK)
AC_SUBST(ENABLE_EMEK_BUILD)
AC_SUBST(ENABLE_OLD_ESDK)
AC_SUBST(ENABLE_USER_INSTALL)
AC_SUBST(ENABLE_ANDROID_CROSS_COMPILE)
AC_SUBST(ENABLE_MIC_CROSS_COMPILE)

AC_SUBST(MAX_CLMESG_LEVEL)
AC_SUBST(DEFAULT_CLMESG_LEVEL)

AC_SUBST(OPENCL_INCLUDE)
AC_SUBST(OPENCL_LIB)
AC_SUBST(OPENCL_LIBNAME)
AC_SUBST(DEFAULT_OPENCL_PLATFORM)

#AC_SUBST(libelf_inc)
#AC_SUBST(libelf_lib)
AC_SUBST(LIBELF_INC)
AC_SUBST(LIBELF_LIB)

AC_SUBST(LIBCOPRTHR_CC)
AC_SUBST(LIBCOPRTHR_CXX)
AC_SUBST(LIBCOPRTHR_MODEL)

AC_SUBST(OPENCL_ICD_PATH)
AC_SUBST(LIBEVENT_PATH)
AC_SUBST(LIBCONFIG_PATH)
AC_SUBST(ESDK_PATH)

AC_SUBST(ANDROID_NDK)
AC_SUBST(ANDROID_PLATFORM)
AC_SUBST(ANDROID_ARCH)

AC_SUBST(LIB_MIC_PATH)

AC_CONFIG_FILES([Makefile])
AC_CONFIG_FILES([install-message.txt])
AC_CONFIG_FILES([src/libstdcl/Makefile])
AC_CONFIG_FILES([src/CLETE/Makefile])
AC_CONFIG_FILES([src/libocl/Makefile])
	AC_CONFIG_FILES([src/libcoprthr/Makefile])
	AC_CONFIG_FILES([src/libcoprthr/arch/x86_64/Makefile])
#	AC_CONFIG_FILES([src/libcoprthr/arch/e32/Makefile])
	AC_CONFIG_FILES([src/libcoprthr_opencl/Makefile])
	AC_CONFIG_FILES([src/libcoprthrcc/Makefile])
if test x$enable_epiphany = xyes; then
	AC_CONFIG_FILES([src/libcoprthr/arch/e32/Makefile])
fi;
AC_CONFIG_FILES([src/libclelf/Makefile])
AC_CONFIG_FILES([src/libclrpc/Makefile])
AC_CONFIG_FILES([tools/cltrace/Makefile])
AC_CONFIG_FILES([tools/xclnm/Makefile])
AC_CONFIG_FILES([tools/clld/Makefile])
AC_CONFIG_FILES([tools/clcc/Makefile])
AC_CONFIG_FILES([tools/clcc1/Makefile])
AC_CONFIG_FILES([tools/clnm/Makefile])
AC_CONFIG_FILES([tools/cltop/Makefile])
AC_CONFIG_FILES([test/Makefile])
AC_CONFIG_FILES([test/test_stdcl/Makefile])
AC_CONFIG_FILES([test/test_libcoprthr_opencl/Makefile])
AC_CONFIG_FILES([test/test_clrpc/Makefile])
AC_CONFIG_FILES([include/Makefile])
AC_CONFIG_FILES([examples/Makefile])
AC_CONFIG_FILES([examples/hello_stdcl/Makefile])
AC_CONFIG_FILES([examples/image2d_example/Makefile])
AC_CONFIG_FILES([examples/mpi_lock_example/Makefile])
AC_CONFIG_FILES([examples/clopen_example/Makefile])
AC_CONFIG_FILES([examples/clmulti_array_example/Makefile])
AC_CONFIG_FILES([examples/clvector_example/Makefile])
AC_CONFIG_FILES([examples/clete_clmulti_array_example/Makefile])
AC_CONFIG_FILES([examples/clete_clvector_example/Makefile])
AC_CONFIG_FILES([examples/bdt_em3d/Makefile])
AC_CONFIG_FILES([examples/bdt_nbody/Makefile])
AC_CONFIG_FILES([examples/bdt_nbody_e32/Makefile])
AC_CONFIG_FILES([examples/bdt_nbody_tutorial/Makefile])
AC_CONFIG_FILES([examples/bdt_nbody_tutorial_2/Makefile])
AC_CONFIG_FILES([examples/parallella/Makefile])
AC_CONFIG_FILES([examples/parallella/hello_stdcl/Makefile])
AC_CONFIG_FILES([examples/parallella/clopen_example/Makefile])
AC_CONFIG_FILES([examples/parallella/clmulti_array_example/Makefile])
AC_CONFIG_FILES([examples/parallella/clvector_example/Makefile])
#AC_CONFIG_FILES([examples/parallella/bdt_nbody/Makefile])
AC_CONFIG_FILES([ndk.sh])

AC_CONFIG_FILES([test/test_libcoprthr_opencl/scripts/run_tests.sh],[chmod +x test/test_libcoprthr_opencl/scripts/run_tests.sh])
AC_CONFIG_FILES([test/test_libcoprthr_opencl/scripts/run_quick_tests.sh],[chmod +x test/test_libcoprthr_opencl/scripts/run_quick_tests.sh])
#if test x$enable_epiphany = xyes; then
#	AC_CONFIG_FILES([test/test_libcoprthr-e/scripts/run_tests.sh],[chmod +x test/test_libcoprthr-e/scripts/run_tests.sh])
#	AC_CONFIG_FILES([test/test_libcoprthr-e/scripts/run_quick_tests.sh],[chmod +x test/test_libcoprthr-e/scripts/run_quick_tests.sh])
#fi;
AC_CONFIG_FILES([test/test_stdcl/scripts/run_tests.sh],[chmod +x test/test_stdcl/scripts/run_tests.sh])
AC_CONFIG_FILES([test/test_stdcl/scripts/run_quick_tests.sh],[chmod +x test/test_stdcl/scripts/run_quick_tests.sh])

AC_CONFIG_FILES([tools/scripts/cldebug],[chmod +x tools/scripts/cldebug])
AC_CONFIG_FILES([tools/scripts/clprocd],[chmod +x tools/scripts/clprocd])
AC_CONFIG_FILES([tools/scripts/Makefile])
AC_CONFIG_FILES([scripts/clprocd])

AC_OUTPUT

